package model {	/**	 * @author Mark Grochowski	 */	public class ApplicationInfo 	{		public var dictionary : DictionaryInfo;		public var prologue : PrologueInfo;//		public var docks : DocksInfo;		public var docks : PageInfo;		public var coin1:Coin1Info;		public var coin2:CoinBasicInfo;		public var coin3:CoinBasicInfo;//		public var coin4:CoinBasicInfo;		public var coin4:PageInfo;		public var coin5:CoinBasicInfo;		public var coin6:CoinBasicInfo;		public var coin7:CoinBasicInfo;		public var steal:PageInfo;		public var negotiate:PageInfo;		public var supplies:PageInfo;		public var traveler:PageInfo;		public var cellar1:PageInfo;		public var cellar2:PageInfo;		public var truth:PageInfo;		public var boatIntro:PageInfo;		public var boat:PageInfo;		public var belowDeck:PageInfo;		public var crossSea:PageInfo;		public var seaMonster:PageInfo;		public var reason:PageInfo;		public var fight:PageInfo;		public var introAllIslands:PageInfo;		//cattery		public var island1:PageInfo;		public var catRanchShore:PageInfo;		public var catlingAffairs:PageInfo;		public var ball:PageInfo;		public var fourthDoor:PageInfo;		public var rendezvous:PageInfo;		public var noTrespassing:PageInfo;		public var follow:PageInfo;		public var scratchEars:PageInfo;		public var mouseConsultation:PageInfo;		public var gameWon:PageInfo;		public var gameLost:PageInfo;		public var thirdDoor:PageInfo;		public var acceptOffer:PageInfo;		public var refuseOffer:PageInfo;		public var privateAudience:PageInfo;		public var returnToBoat:PageInfo;		public var linger:PageInfo;		//joyless mountains		public var joylessIntro:PageInfo;		public var climb1:PageInfo;		public var climb2:PageInfo;		public var climb3:PageInfo;		public var cave:PageInfo;		public var elevator:PageInfo;		public var treasure:PageInfo;		public var climb4:PageInfo;		public var escalator1:PageInfo;		public var explore:PageInfo;		public var picnic:PageInfo;		public var escalator2:PageInfo;		public var rally:PageInfo;		public var METS4Eva:PageInfo;		public var platform3:PageInfo;		public var roses:PageInfo;		public var platform4:PageInfo;		public var snowmonch:PageInfo;		public var stealStone:PageInfo;		public var awakenSerpent:PageInfo;		public var impatience1:PageInfo;		public var dinner:PageInfo;		public var impatience2:PageInfo;		public var talk:PageInfo;		public var impatience3:PageInfo;		public var playSong:PageInfo;		public var playRiddles:PageInfo;		public var stone:PageInfo;		//shipwreck cove		public var shipwreckCove:PageInfo;		public var smeg:PageInfo;		public var captain:PageInfo;		//sandlands		public var sandlands:PageInfo;		public var shore:PageInfo;		public var straight:PageInfo;		public var winding:PageInfo;		public var wait:PageInfo;		public var apprentice:PageInfo;		public var well:PageInfo;		public var well2:PageInfo;		public var well3:PageInfo;		public var well4:PageInfo;		public var findWizard:PageInfo;		public var sand:PageInfo;		public var sand2:PageInfo;		public var sand3:PageInfo;		public var hut:PageInfo;		public function ApplicationInfo() : void		{		}		public static function parseInfo( xml : XML ) : ApplicationInfo		{//			trace("parseInfo" + xml);			if( !xml ) return null;						var res : ApplicationInfo = new ApplicationInfo( );			res.dictionary = parseXmlForDictionary( xml["dictionary"] );			res.prologue = parseXMLForPrologue( xml["prologue"] );			res.docks = parseXMLForPage( xml["docks"] );			res.coin1 = parseXMLForCoin1( xml["coin1"] );			res.coin2 = parseXMLForCoinBasic( xml["coin2"] );			res.coin3 = parseXMLForCoinBasic( xml["coin3"] );			res.coin4 = parseXMLForPage( xml["coin4"] ); 			res.coin5 = parseXMLForCoinBasic( xml["coin5"] );			res.coin6 = parseXMLForCoinBasic( xml["coin6"] );			res.coin7 = parseXMLForCoinBasic( xml["coin7"] );			res.steal = parseXMLForPage( xml["steal"] );			res.negotiate = parseXMLForPage( xml["negotiate"] );			res.supplies = parseXMLForPage( xml["supplies"] );			res.traveler = parseXMLForPage( xml["traveler"] );			res.cellar1 = parseXMLForPage( xml["cellar1"] );			res.cellar2 = parseXMLForPage( xml["cellar2"] );			res.truth = parseXMLForPage( xml["truth"] );			res.boatIntro = parseXMLForPage( xml["boatIntro"] );			res.boat = parseXMLForPage( xml["boat"] );			res.belowDeck = parseXMLForPage( xml["belowDeck"] );			res.crossSea = parseXMLForPage( xml["crossSea"] );			res.seaMonster = parseXMLForPage( xml["seaMonster"] );			res.reason = parseXMLForPage( xml["reason"] );			res.fight = parseXMLForPage( xml["fight"] );			res.introAllIslands = parseXMLForPage( xml["introAllIslands"] );			//cattery			res.island1 = parseXMLForPage( xml["island1"] );			res.catRanchShore = parseXMLForPage( xml["catRanchShore"] );			res.catlingAffairs = parseXMLForPage( xml["catlingAffairs"] );			res.ball = parseXMLForPage( xml["ball"] );			res.fourthDoor = parseXMLForPage( xml["fourthDoor"] );			res.rendezvous = parseXMLForPage( xml["rendezvous"] );			res.noTrespassing = parseXMLForPage( xml["noTrespassing"] );			res.follow = parseXMLForPage( xml["follow"] );			res.scratchEars = parseXMLForPage( xml["scratchEars"] );			res.mouseConsultation = parseXMLForPage( xml["mouseConsultation"] );			res.gameWon = parseXMLForPage( xml["gameWon"] );			res.gameLost = parseXMLForPage( xml["gameLost"] );			res.thirdDoor = parseXMLForPage( xml["thirdDoor"] );			res.acceptOffer = parseXMLForPage( xml["acceptOffer"] );			res.refuseOffer = parseXMLForPage( xml["refuseOffer"] );			res.privateAudience = parseXMLForPage( xml["privateAudience"] );			res.returnToBoat = parseXMLForPage( xml["returnToBoat"] );			res.linger = parseXMLForPage( xml["linger"] );			//joyless mountins			res.joylessIntro = parseXMLForPage( xml["joylessMountainsIntro"] );			res.climb1 = parseXMLForPage( xml["climb1"] );			res.climb2 = parseXMLForPage( xml["climb2"] );			res.climb3 = parseXMLForPage( xml["climb3"] );			res.cave = parseXMLForPage( xml["cave"] );			res.elevator = parseXMLForPage( xml["elevator"] );			res.treasure = parseXMLForPage( xml["treasure"] );			res.climb4 = parseXMLForPage( xml["climb4"] );			res.escalator1 = parseXMLForPage( xml["escalator1"] );			res.explore = parseXMLForPage( xml["explore"] );			res.picnic = parseXMLForPage( xml["picnic"] );			res.escalator2 = parseXMLForPage( xml["escalator2"] );			res.rally = parseXMLForPage( xml["rally"] );			res.METS4Eva = parseXMLForPage( xml["METS4Eva"] );			res.platform3 = parseXMLForPage( xml["platform3"] );			res.roses = parseXMLForPage( xml["roses"] );			res.platform4 = parseXMLForPage( xml["platform4"] );			res.snowmonch = parseXMLForPage( xml["snowmonch"] );			res.stealStone = parseXMLForPage( xml["stealStone"] );			res.awakenSerpent = parseXMLForPage( xml["awakenSerpent"] );			res.impatience1 = parseXMLForPage( xml["impatience1"] );			res.dinner = parseXMLForPage( xml["dinner"] );			res.impatience2 = parseXMLForPage( xml["impatience2"] );			res.talk = parseXMLForPage( xml["talk"] );			res.impatience3 = parseXMLForPage( xml["impatience3"] );			res.playSong = parseXMLForPage( xml["playSong"] );			res.playRiddles = parseXMLForPage( xml["playRiddles"] );			res.stone = parseXMLForPage( xml["stone"] );			//shipwreck cove			res.shipwreckCove = parseXMLForPage( xml["shipwreckCove"] );			res.smeg = parseXMLForPage( xml["smeg"] );			res.captain = parseXMLForPage( xml["captain"] );			//sandlands			res.sandlands = parseXMLForPage( xml["sandlands"] );			res.shore = parseXMLForPage( xml["shore"] );			res.straight = parseXMLForPage( xml["straight"] );			res.winding = parseXMLForPage( xml["winding"] );			res.wait = parseXMLForPage( xml["wait"] );			res.apprentice = parseXMLForPage( xml["apprentice"] );			res.well = parseXMLForPage( xml["well"] );			res.well2 = parseXMLForPage( xml["well2"] );			res.well3 = parseXMLForPage( xml["well3"] );			res.well4 = parseXMLForPage( xml["well4"] );			res.findWizard = parseXMLForPage( xml["findWizard"] );			res.sand = parseXMLForPage( xml["sand"] );			res.sand2 = parseXMLForPage( xml["sand2"] );			res.sand3 = parseXMLForPage( xml["sand3"] );			res.hut = parseXMLForPage( xml["hut"] );						return res;		}		private static function parseXmlForDictionary( xml : XMLList ) : DictionaryInfo		{			var dictionary:DictionaryInfo = new DictionaryInfo();						dictionary.pronoun1 = new Array();			dictionary.pronoun1[0] = xml["pronoun1"].@male;			dictionary.pronoun1[1] = xml["pronoun1"].@female;			dictionary.pronoun1[2] = xml["pronoun1"].@undecided;						dictionary.pronoun2 = new Array();			dictionary.pronoun2[0] = xml["pronoun2"].@male;			dictionary.pronoun2[1] = xml["pronoun2"].@female;			dictionary.pronoun2[2] = xml["pronoun2"].@undecided;						dictionary.pronoun3 = new Array();			dictionary.pronoun3[0] = xml["pronoun3"].@male;			dictionary.pronoun3[1] = xml["pronoun3"].@female;			dictionary.pronoun3[2] = xml["pronoun3"].@undecided;						dictionary.pronoun4 = new Array();			dictionary.pronoun4[0] = xml["pronoun4"].@male;			dictionary.pronoun4[1] = xml["pronoun4"].@female;			dictionary.pronoun4[2] = xml["pronoun4"].@undecided;						return dictionary;		}				private static function parseXMLForPrologue( xml : XMLList ) : PrologueInfo		{			var prologue : PrologueInfo = new PrologueInfo();			prologue.id = xml.@id;						prologue.body = new Vector.<StoryPart>();			parseBody(xml, prologue);						prologue.decisions = new Vector.<DecisionInfo>();			parseDecisions(xml, prologue);						prologue.wardrobe1 = new Array();			// male			prologue.wardrobe1[0] = new Array();			for each (var wardrobe1M:XML in xml["wardrobe1"]["male"].children()) {				prologue.wardrobe1[0].push(wardrobe1M); 			}			// female			prologue.wardrobe1[1] = new Array();			for each (var wardrobe1F:XML in xml["wardrobe1"]["female"].children()) {				prologue.wardrobe1[1].push(wardrobe1F); 			}						prologue.wardrobe2 = new Array();			for each (var wardrobe2:XML in xml["wardrobe2"].children()) {				prologue.wardrobe2.push(wardrobe2); 			}						prologue.instrument1 = new Array();			for each (var instrument1:XML in xml["instrument1"].children()) {				prologue.instrument1.push(instrument1); 			}						prologue.companion1 = new Array();			for each (var companion1:XML in xml["companion1"].children()) {				prologue.companion1.push(companion1); 			}						return prologue;		}				private static function parseXMLForCoin1( xml : XMLList ) : Coin1Info		{			var coin1 : Coin1Info = new Coin1Info();						coin1.id = xml.@id;						coin1.body = new Vector.<StoryPart>();			parseBody(xml, coin1);						coin1.decisions = new Vector.<DecisionInfo>();			parseDecisions(xml, coin1);						coin1.companion1 = new Array();			for each (var companion1:XML in xml["companion1"].children()) {				coin1.companion1.push(companion1); 			}						return coin1;		}				private static function parseXMLForCoinBasic( xml : XMLList ) : CoinBasicInfo		{			var coin : CoinBasicInfo = new CoinBasicInfo();						coin.id = xml.@id;						coin.body = new Vector.<StoryPart>();			parseBody(xml, coin);						coin.decisions = new Vector.<DecisionInfo>();			parseDecisions(xml, coin);						return coin;		}				private static function parseXMLForDocks( xml : XMLList ) : DocksInfo		{			var docks : DocksInfo = new DocksInfo();						docks.id = xml.@id;						docks.body = new Vector.<StoryPart>();			parseBody(xml, docks);						docks.decisions = new Vector.<DecisionInfo>();			parseDecisions(xml, docks);						docks.alms = new Array();			for each (var alm:XML in xml["alms"].children()) {				docks.alms.push(alm); 			}						return docks;		}				private static function parseXMLForPage( xml : XMLList ) : PageInfo		{			var page : PageInfo = new PageInfo();						page.id = xml.@id;						page.body = new Vector.<StoryPart>();			parseBody(xml, page);						page.decisions = new Vector.<DecisionInfo>();			parseDecisions(xml, page);						var node:XML;						if (xml["alms"].length() > 0) {				page.alms = new Array();				for each (node in xml["alms"].children()) {					page.alms.push(node); 				}			}						if (xml["instrument1"].length() > 0) {				page.instrument1 = new Array();				for each (node in xml["instrument1"].children()) {					page.instrument1.push(node); 				}			}						if (xml["instrument2"].length() > 0) {				page.instrument2 = new Array();				for each (node in xml["instrument2"].children()) {					page.instrument2.push(node); 				}			}						if (xml["wardrobe1"].length() > 0) {				page.wardrobe1 = new Array();				for each (node in xml["wardrobe1"].children()) {					page.wardrobe1.push(node); 				}			}						if (xml["wardrobe2"].length() > 0) {				page.wardrobe2 = new Array();				for each (node in xml["wardrobe2"].children()) {					page.wardrobe2.push(node); 				}			}						if (xml["weapon1"].length() > 0) {				page.weapon1 = new Array();				for each (node in xml["weapon1"].children()) {					page.weapon1.push(node); 				}			}						if (xml["weapon2"].length() > 0) {				page.weapon2 = new Array();				for each (node in xml["weapon2"].children()) {					page.weapon2.push(node); 				}			}						if (xml["weapon3"].length() > 0) {				page.weapon3 = new Array();				for each (node in xml["weapon3"].children()) {					page.weapon3.push(node); 				}			}						if (xml["weapon4"].length() > 0) {				page.weapon4 = new Array();				for each (node in xml["weapon4"].children()) {					page.weapon4.push(node); 				}			}						if (xml["supplies"].length() > 0) {				page.supplies = new Array();				for each (node in xml["supplies"].children()) {//					page.supplies.push(node); 					// if there is a sub array of options					if (node["weapons"].length() > 0) {						var tempArray:Array = new Array();						for each (node in node["weapons"].children()) {							tempArray.push(node); 						}						page.supplies.push(tempArray);//						trace("supplies has weapons tempArray:"+tempArray);					} else { //default						page.supplies.push(node); 					}				}			}						if (xml["companion1"].length() > 0) {				page.companion1 = new Array();				for each (node in xml["companion1"].children()) {					page.companion1.push(node); 				}			}						if (xml["companion2"].length() > 0) {				page.companion2 = new Array();				for each (node in xml["companion2"].children()) {					page.companion2.push(node); 				}			}						if (xml["companion3"].length() > 0) {				page.companion3 = new Array();				for each (node in xml["companion3"].children()) {					page.companion3.push(node); 				}			}						if (xml["companion4"].length() > 0) {				page.companion4 = new Array();				for each (node in xml["companion4"].children()) {					page.companion4.push(node); 				}			}						if (xml["islands1"].length() > 0) {				page.islands1 = new Array();				for each (node in xml["islands1"].children()) {					page.islands1.push(node); 				}			}						if (xml["islands2"].length() > 0) {				page.islands2 = new Array();				for each (node in xml["islands2"].children()) {					page.islands2.push(node); 				}			}						if (xml["coins"].length() > 0) {				page.coins = new Array();				for each (node in xml["coins"].children()) {					page.coins.push(node); 				}			}						if (xml["captainBattled"].length() > 0) {				page.captainBattled = new Array();				for each (node in xml["captainBattled"].children()) {					page.captainBattled.push(node); 				}			}						if (xml["companionComing1"].length() > 0) {				page.companionComing1 = new Array();				for each (node in xml["companionComing1"].children()) {					// if there is a sub array of companion options					if (node["companion"].length() > 0) {						var tempArray0:Array = new Array();						for each (node in node["companion"].children()) {							tempArray0.push(node); 						}						page.companionComing1.push(tempArray0);					} else { //default						page.companionComing1.push(node); 					}				}			}						if (xml["companionComing2"].length() > 0) {				page.companionComing2 = new Array();				for each (node in xml["companionComing2"].children()) {					page.companionComing2.push(node); 				}			}						if (xml["companionComing3"].length() > 0) {				page.companionComing3 = new Array();				for each (node in xml["companionComing3"].children()) {					page.companionComing3.push(node); 				}			}						if (xml["companionComing4"].length() > 0) {				page.companionComing4 = new Array();				for each (node in xml["companionComing4"].children()) {					page.companionComing4.push(node); 				}			}						if (xml["companionComing5"].length() > 0) {				page.companionComing5 = new Array();				for each (node in xml["companionComing5"].children()) {					page.companionComing5.push(node); 				}			}						if (xml["gender1"].length() > 0) {				page.gender1 = new Array();				for each (node in xml["gender1"].children()) {					page.gender1.push(node); 				}			}						if (xml["hair1"].length() > 0) {				page.hair1 = new Array();				for each (node in xml["hair1"].children()) {					page.hair1.push(node); 				}			}						if (xml["intro1"].length() > 0) {				page.intro1 = new Array();				for each (node in xml["intro1"].children()) {					page.intro1.push(node); 				}			}						if (xml["intro2"].length() > 0) {				page.intro2 = new Array();				for each (node in xml["intro2"].children()) {					page.intro2.push(node); 				}			}						if (xml["stones1"].length() > 0) {				page.stones1 = new Array();				for each (node in xml["stones1"].children()) {					// if there is a sub array of options					if (node.children().length() > 0) {						var tempArray2:Array = new Array();						for each (node in node.children()) {							tempArray2.push(node); 						}						page.stones1.push(tempArray2);					} else { //default						page.stones1.push(node); 					}				}			}						if (xml["pearlObtained"].length() > 0) {				page.pearlObtained = new Array();				for each (node in xml["pearlObtained"].children()) {					page.pearlObtained.push(node); 				}			}						return page;		}				private static function parseBody(thisXMLList:XMLList, thisInfo:*) : void {			for each (var item:XML in thisXMLList["body"].children()) {				var part:StoryPart = new StoryPart();				part.type = item.@type;				part.id = item.@id;				part.width = item.@width;				part.height = item.@height;				part.size = item.@size;				part.alignment = item.@align;				part.top = item.@top;				part.left = item.@left;				part.leading = item.@leading;				part.file = item.@file;				part.copyText = item;				thisInfo.body.push(part);			}		}				private static function parseDecisions(thisXMLList:XMLList, thisInfo:*) : void {			for each (var decision:XML in thisXMLList["decisions"].children()) {				var decInfo:DecisionInfo = new DecisionInfo();				decInfo.id = decision.@id;				decInfo.description = decision;				thisInfo.decisions.push(decInfo);			}			thisInfo.decisionsMarginTop = Number(thisXMLList["decisions"].@top);		}			}}