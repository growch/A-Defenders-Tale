package util {	import flash.display.BitmapData;	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;		import events.LoadingManagerEvent;		import flash.display.Bitmap;	import flash.events.Event;	import flash.events.EventDispatcher;		/**	 * @author iasseo	 */	public class LoadingManager extends EventDispatcher 	{		//Singleton instance		private static var inst : LoadingManager;		private var _loader : BulkLoader;		private var cueArray : Array = [];		public static const IMAGE : String = "image";		public static const MOVIE_CLIP : String = "movie_clip";		/**		 * contructor.		 * 		 * @return nothing		 */			public function LoadingManager():void		{			_loader = new BulkLoader( "_as3_mvc_template_loader" );			// set level to verbose, for debugging only			_loader.logLevel = BulkLoader.LOG_SILENT;						// dispatched when ALL the items have been loaded:			_loader.addEventListener( BulkLoader.COMPLETE, onAllItemsLoaded );			// dispatched when any item has progress:			_loader.addEventListener( BulkLoader.PROGRESS, onAllItemsProgress );		}		/**		 * singleton.		 * 		 * @return instance of DataLoader		 */			public static function getInstance():LoadingManager{			if( inst == null ) inst = new LoadingManager();			return inst;		}				public function getImageByName(str:String):Bitmap		{			var bmp : Bitmap;			try{				var bmpData : BitmapData = _loader.getBitmap(str).bitmapData.clone();				bmp = new Bitmap(bmpData);			}catch(e:Error){				trace("Error getting BMP: ", str, e);				bmp = new Bitmap(new BitmapData(1,1));			}			return bmp;		}				public function getObjectByName(str:String, type:String):*		{			switch(type){				case IMAGE:					return _loader.getBitmap(str);					break;								case MOVIE_CLIP:					return _loader.getMovieClip(str);					break;			}		}					private function onAllItemsLoaded(e : Event) : void		{			dispatchEvent(new LoadingManagerEvent(LoadingManagerEvent.LOAD_COMPLETE));			//_loader.removeEventListener( BulkLoader.COMPLETE, onAllItemsLoaded );			//_loader.removeEventListener( BulkLoader.PROGRESS, onAllItemsProgress );		}		private function onAllItemsProgress(evt : BulkProgressEvent) : void		{			//Logger.log( evt.loadingStatus( ) );			var percent : int = Math.floor( evt.percentLoaded * 100 );			if(Math.round( evt.percentLoaded * 100 ) < 100)			{				dispatchEvent(new LoadingManagerEvent(LoadingManagerEvent.LOAD_PROGRESS, percent));				//_loader.removeEventListener( BulkLoader.PROGRESS, onAllItemsProgress );			}		}				public function acquireBatch(imgArray : Array) : void		{			var count : int = 0;						for (var i:Number = 0; i<imgArray.length; i++ ){				if (_loader.getBitmap(imgArray[i])){					count++;				}else{										_loader.add(imgArray[i], {id:imgArray[i], maxTries:6, priority:imgArray.length-i});				}			}			if (count == imgArray.length){				dispatchEvent(new LoadingManagerEvent(LoadingManagerEvent.LOAD_COMPLETE));			}else{				// now start the loading				_loader.start( );			}		}				public function acquireSingle(img : String) : void		{			if (_loader.getBitmap(img)){				dispatchEvent(new LoadingManagerEvent(LoadingManagerEvent.LOAD_COMPLETE));			}else{				_loader.add(img, {id:img, maxTries:6, priority:10});				_loader.start( );			}			// now start the loading		}	}}