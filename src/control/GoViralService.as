package control {import com.milkmangames.nativeextensions.GVFacebookFriend;import com.milkmangames.nativeextensions.GVHttpMethod;import com.milkmangames.nativeextensions.GVSocialServiceType;import com.milkmangames.nativeextensions.GoViral;import com.milkmangames.nativeextensions.events.GVFacebookEvent;import com.milkmangames.nativeextensions.events.GVMailEvent;import com.milkmangames.nativeextensions.events.GVShareEvent;import com.milkmangames.nativeextensions.events.GVTwitterEvent;import flash.display.Bitmap;import flash.display.MovieClip;import flash.display.Sprite;import flash.events.MouseEvent;import flash.events.TimerEvent;import flash.geom.Rectangle;import flash.text.TextField;import flash.utils.Timer;import events.ApplicationEvent;import events.ViewEvent;import model.DataModel;/** GoViralExample App */public class GoViralService extends MovieClip{	//	// Definitions	//		/** CHANGE THIS TO YOUR FACEBOOK APP ID! */	public static const FACEBOOK_APP_ID:String="351887674885054";		//	// Instance Variables	//	private var _commentLikeTimer:Timer;	private var _timerDelay:Number = 10000;	private var _wallpostID:String;		public var isSupported:Boolean;		/** Status */	private var txtStatus:TextField;		/** Buttons */	private var buttonContainer:Sprite;		//	// Public Methods	//			/** Create New GoViralExample */	public function GoViralService() 	{				//createUI();				log("Started GoViral Example.");		init();	}		/** Init */	public function init():void	{		// check if GoViral is supported.  note that this just determines platform support- iOS - and not		// whether the particular version supports it.				if (!GoViral.isSupported())		{			log("Extension is not supported on this platform.");			return;		}				isSupported = true;				// initialize the extension.		GoViral.create();			log("GoViral Extension Initialized: "+GoViral.VERSION);				// initialize facebook.				// this is to make sure you remembered to put in your app ID !		if (FACEBOOK_APP_ID=="YOUR_FACEBOOK_APP_ID")		{			log("You forgot to put in Facebook ID!");		}		else		{			log("Initializing facebook...");			GoViral.goViral.initFacebook(FACEBOOK_APP_ID, "");			log("Facebook Initialized! GoViral v"+GoViral.VERSION);		}				// set up all the event listeners.		// you only need the ones for the services you want to use.				// facebook events		GoViral.goViral.addEventListener(GVFacebookEvent.FB_DIALOG_CANCELED,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_DIALOG_FAILED,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_DIALOG_FINISHED,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_IN,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_OUT,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_CANCELED,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_FAILED,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_REQUEST_FAILED,onFacebookEvent);		GoViral.goViral.addEventListener(GVFacebookEvent.FB_REQUEST_RESPONSE,onFacebookEvent);			}		public function dispose() : void {		logoutFacebook();				GoViral.goViral.removeEventListener(GVFacebookEvent.FB_DIALOG_CANCELED,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_DIALOG_FAILED,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_DIALOG_FINISHED,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_LOGGED_IN,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_LOGGED_OUT,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_LOGIN_CANCELED,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_LOGIN_FAILED,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_REQUEST_FAILED,onFacebookEvent);		GoViral.goViral.removeEventListener(GVFacebookEvent.FB_REQUEST_RESPONSE,onFacebookEvent);				stopTimer();				GoViral.goViral.dispose();	}	// facebook		/** Login to facebook */	public function loginFacebook():void	{//		log("Login facebook...");//		if(!GoViral.goViral.isFacebookAuthenticated())//		{////			GoViral.goViral.authenticateWithFacebook("user_likes,user_photos,publish_stream");//			GoViral.goViral.authenticateWithFacebook("publish_stream");//		} else {//			EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_LOGGED_IN));//		}//		log("done.");		log("Login facebook...");		if(!GoViral.goViral.isFacebookAuthenticated())		{						// you must set at least one read permission.  if you don't know what to pick, 'basic_info' is fine.			// PUBLISH PERMISSIONS are NOT permitted by Facebook here anymore.//			GoViral.goViral.authenticateWithFacebook("user_likes,user_photos"); 			GoViral.goViral.authenticateWithFacebook("basic_info"); 		} else {			EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_LOGGED_IN));		}		log("done.");	}		/** Logout of facebook */	public function logoutFacebook():void	{		log("logout fb.");		GoViral.goViral.logoutFacebook();		log("done logout.");	}		public function postFacebookWall(title:String, caption:String, message:String):void	{		if (!checkLoggedInFacebook()) {			loginFacebook();			return;		}				log("posting fb feed...");		GoViral.goViral.showFacebookFeedDialog(			title,			caption,			message,			message,			"http://www.adefenderstale.com",			"http://www.adefenderstale.com/media/stills/iPad_01.png"		);				log("done feed post.");	}			/** Post to the facebook wall / feed via dialog */	public function postFeedFacebook():void	{		if (!checkLoggedInFacebook()) return;				log("posting fb feed...");		GoViral.goViral.showFacebookFeedDialog(			"Posting from AIR",			"This is a caption",			"This is a message!",			"This is a description",			"http://www.milkmangames.com",			"http://www.milkmangames.com/blog/wp-content/uploads/2012/01/v202.jpg"		);				log("done feed post.");	}		public function postFinishedAppFacebook():void	{		if (!checkLoggedInFacebook()) return;				log("posting fb feed...");		var params:Object={};		params.tags = DataModel.defenderInfo.contactFBID;		params.comment = "Testing comment";				GoViral.goViral.showFacebookFeedDialog(			"Posting from A Defender's Tale  (available for iPad in the Itunes store)",			"I defended the Realm!",			"I defended the Realm!",			"It was an amazing challenge, but somehow I did it. Now you can too: http://www.adefenderstale.com",			"http://www.adefenderstale.com",			"http://www.adefenderstale.com/media/stills/iPad_01.png",			params		);				log("done feed post.");	}			public function sendFacebookContactMessage(thisMessage:String):void	{		if (!checkLoggedInFacebook()) return;				log("sendFacebookContactMessage");		GoViral.goViral.showFacebookRequestDialog(thisMessage,"An Urgent Message from A Defender's Tale",null, null, DataModel.defenderInfo.contactFBID);		log("sent friend message.");	}		/** Get a list of all your facebook friends */	public function getFriendsFacebook():void	{//		if (!checkLoggedInFacebook()) return;//		//		log("getting friends...");//		GoViral.goViral.requestFacebookFriends();//		log("sent friend list request.");				if (!checkLoggedInFacebook()) return;				log("getting friends.(finstn)..");		GoViral.goViral.requestFacebookFriends({fields:"installed,first_name"});		log("sent friend list request.");		}		/** Get your own facebook profile */	public function getMeFacebook():void	{		if (!checkLoggedInFacebook()) return;				log("Getting profile...");		GoViral.goViral.requestMyFacebookProfile();		log("sent profile request.");	}		/** Get Facebook Access Token */	public function getFacebookToken():void	{		log("Retrieving access token...");		var accessToken:String=GoViral.goViral.getFbAccessToken();		var accessExpiry:Number=GoViral.goViral.getFbAccessExpiry();		log("expiry:"+accessExpiry+",Token is:"+accessToken);	}		/** Make a post graph request */	public function postGraphFacebook():void	{		if (!checkLoggedInFacebook()) return;				log("Graph posting...");		var params:Object={};		params.name="Name Test";		params.caption="Caption Test";		params.link="http://www.google.com";		params.picture="http://www.milkmangames.com/blog/wp-content/uploads/2012/01/v202.jpg";		params.actions=new Array();		params.actions.push({name:"Link NOW!",link:"http://www.google.com"});				// notice the "publish_actions", a required publish permission to write to the graph!		GoViral.goViral.facebookGraphRequest("me/feed",GVHttpMethod.POST,params,"publish_actions");		log("post complete.");	}		/** Show a facebook friend invite dialog */	public function inviteFriendsFacebook():void	{		if (!checkLoggedInFacebook()) return;				log("inviting friends.");		GoViral.goViral.showFacebookRequestDialog("This is just a test","My Title","somedata");		log("sent friend invite.");	}			/** Check you're logged in to facebook before doing anything else. */	private function checkLoggedInFacebook():Boolean	{		// make sure you're logged in first		if (!GoViral.goViral.isFacebookAuthenticated())		{			log("Not logged in!");			return false;		}		return true;	}		//	// Events	//		/** Handle Facebook Event */	private function onFacebookEvent(e:GVFacebookEvent):void	{		// post id				log("onFacebookEvent e: "+e);//		THE JSON IS THE RAW DATA, YOU WANT THIS IF YOU WANT TO KNOW WHAT IS IN OBJECT RETURNED//		log("e.jsonData: "+e.jsonData);//		log("e.data: "+e.data);		switch(e.type)		{			case GVFacebookEvent.FB_DIALOG_CANCELED:				log("Facebook dialog '"+e.dialogType+"' canceled.");				EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DONE));				break;			case GVFacebookEvent.FB_DIALOG_FAILED:				log("dialog err:"+e.errorMessage);				EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DONE));				break;			case GVFacebookEvent.FB_DIALOG_FINISHED:				log("Facebook dialog '"+e.dialogType+"' finished.");				EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DONE));				// sucessful post to feed//				if (e.dialogType == "feed") {//					_wallpostID = e.data.post_id;//					if (!_commentLikeTimer) {//						_commentLikeTimer =  new Timer(_timerDelay);//						_commentLikeTimer.addEventListener(TimerEvent.TIMER, checkForCommentsLikes);//						_commentLikeTimer.start();//	//					log("FEEEEED DONE e.jsonData: "+e.jsonData);//					}//				}								break;			case GVFacebookEvent.FB_LOGGED_IN:				log("Logged in to facebook!");				EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_LOGGED_IN));				break;			case GVFacebookEvent.FB_LOGGED_OUT:				log("Logged out of facebook.");				break;			case GVFacebookEvent.FB_LOGIN_CANCELED:				log("Canceled facebook login.");				break;			case GVFacebookEvent.FB_REQUEST_FAILED:				log("Facebook '"+e.graphPath+"' failed:"+e.errorMessage);				break;			case GVFacebookEvent.FB_REQUEST_RESPONSE://				log("gvFbRawResponse");								// sucessful post to feed//				if(e.graphPath.search("feed") != -1) {//					_wallpostID = e.data.post_id;//					_commentLikeTimer =  new Timer(_timerDelay);//					_commentLikeTimer.addEventListener(TimerEvent.TIMER, checkForCommentsLikes);//					_commentLikeTimer.start();//					return;//				}								// comment posted or help post liked				if(e.graphPath.search("comments") != -1 || e.graphPath.search("likes") != -1) {					if (e.data.data.length > 0) {						stopTimer();//						log("YOU ARE FREEEE!");						EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_CONTACT_RESPONSE));					}										return;				}								// handle a friend list- there will be only 1 item in it if 				// this was a 'my profile' request.								if (e.friends!=null)				{										// 'me' was a request for own profile.					if (e.graphPath=="me")					{						var myProfile:GVFacebookFriend=e.friends[0];//						log("Me: name='"+myProfile.name+"',gender='"+myProfile.gender+"',location='"+myProfile.locationName+"',bio='"+myProfile.bio+"'");						log("myProfile commented out");						EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DEFENDER_INFO, myProfile));						return;					}										// 'me/friends' was a friends request.					if (e.graphPath=="me/friends")					{											var allFriends:String="";						var friendsVector:Vector.<GVFacebookFriend> = new Vector.<GVFacebookFriend>();						for each(var friend:GVFacebookFriend in e.friends)						{							allFriends+=","+friend.name;							friendsVector.push(friend);						}						EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DEFENDER_FRIENDS, friendsVector));//						log(e.graphPath+"= ("+e.friends.length+")="+allFriends+",json="+e.jsonData);						log("friends list commented out");					}				}				else				{					log(e.graphPath+" res="+e.jsonData);				}				break;		}	}		private function stopTimer():void	{		if (_commentLikeTimer != null) {			_commentLikeTimer.removeEventListener(TimerEvent.TIMER, checkForCommentsLikes);			_commentLikeTimer.stop();			_commentLikeTimer = null;		}				log("stopTimer");	}		protected function checkForCommentsLikes(event:TimerEvent):void	{		log("checkForCommentsLikes");		GoViral.goViral.facebookGraphRequest(_wallpostID+"/comments",GVHttpMethod.GET);		GoViral.goViral.facebookGraphRequest(_wallpostID+"/likes",GVHttpMethod.GET);	}	//	// Impelementation	//		/** Log */	private function log(msg:String):void	{		trace("[GoViralService] "+msg);//		txtStatus.text=msg;		txtStatus.appendText("\n"+msg);	}		private function logStatus(msg:String):void	{		txtStatus.appendText("-"+msg);	}		/** Create UI */	//public function createUI():void	//{	//	txtStatus=new TextField();			//	txtStatus.defaultTextFormat=new flash.text.TextFormat("Arial Bold",22);	//	txtStatus.width=DataModel.APP_WIDTH;	//	txtStatus.height=DataModel.APP_HEIGHT;	//	txtStatus.multiline=true;	//	txtStatus.wordWrap=true;	//	txtStatus.text="Ready";	//	txtStatus.textColor = 0xFFFFFF;	//	txtStatus.y=txtStatus.textHeight;	//	addChild(txtStatus);	//}		}}
