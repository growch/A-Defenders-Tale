package control {		import com.greensock.TweenMax;	import com.greensock.easing.Quad;	import com.neriksworkshop.lib.ASaudio.Track;		import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.registerClassAlias;	import flash.system.Capabilities;	import flash.system.System;	import flash.utils.describeType;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;		import assets.FadeToBlackMC;		import events.ApplicationEvent;	import events.ViewEvent;		import model.DataModel;	import model.DefenderApplicationInfo;		import view.ApplicationView;	import view.IPageView;	import view.NavigationView;	import view.TitleScreenView;	import view.theCattery.CatRanchShoreView;



	/**	 * @author Mark Grochowski	 */	public class ViewController2 	{		private var _mc : MovieClip;		private var _titleScreen:TitleScreenView;		private var _applicationScreen:ApplicationView;		private var _goViral:GoViralService;		private var _sectionHolder:Sprite;		private var _navigation:NavigationView;		private var _currentPage:IPageView;		private var _newPageClass:Class;		private var _randNum:int;		private var _introSound:Track;		private var _fade:FadeToBlackMC;				public function ViewController2( mc : MovieClip )		{			_mc = mc;			//			TESTING!!!!!!!!!//			_mc.y = -140;						var myOS:String = Capabilities.os; 			var myOSLowerCase:String = myOS.toLowerCase();			if(myOSLowerCase.indexOf("ipad1,", 0) >= 0) {				DataModel.ipad1 = true;			} 						EventController.getInstance().addEventListener(ApplicationEvent.TITLE_DONE, showApplication);			EventController.getInstance().addEventListener(ApplicationEvent.APPLICATION_SUBMITTED, appSubmitted);			EventController.getInstance().addEventListener(ViewEvent.SHOW_PAGE, showPage);						//			_titleScreen = new TitleScreenView;//			_mc.addChild(_titleScreen);//			//			_introSound = new Track("assets/audio/intro.mp3");//			_introSound.start(true);//			_introSound.loop = true;						_sectionHolder = new Sprite(); 			_mc.addChild(_sectionHolder);						_navigation = new NavigationView();			_mc.addChild(_navigation);			TweenMax.to(_navigation, 0, {autoAlpha:0});						_fade = new FadeToBlackMC();			_mc.addChild(_fade);			TweenMax.to(_fade, 0, {autoAlpha:0});						// SKIP TO APPLICATION FOR TESTING!!!!//			showApplication(null);						testData();			//			view.shipwreck.JellyfishGameView			CatRanchShoreView//			addPage("theCattery.CatRanchShoreView");						_loadClasses();		}				/**		 * Loads a SWF with classes to load dynamically at run-time.		 *		 */		private function _loadClasses():void		{			var loader:Loader = new Loader(); URLRequest			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,_handleComplete,false,0,true);			loader.load(new URLRequest("assets/swfs/view/theCattery.FourthDoorView.swf"));//			loader.load(new URLRequest("assets/swfs/view/prologue.PrologueView.swf"));//			loader.load(new URLRequest("assets/swfs/view/ExampleClassLib.swf"));//			loader.load(new URLRequest("assets/swfs/view/classes.swf"));		}				/**		 * Handles the loading complete event and registers the loaded		 * classes and starts the classes to print the NAME properties		 * from the instances.		 *		 * @param event		 *		 */		private function _handleComplete(event:Event):void		{			// Get Vector. object			var loaderInfo:LoaderInfo	= event.target as LoaderInfo; 			var loader:Loader		= loaderInfo.loader;//			trace("loaderInfo: "+loaderInfo);//			trace("loader: "+loader.content);//			return;			var classes:Vector.<Class>	= Object(loader.content).getMyClasses();						// Go through classes			var loadedClass:Class;			for each (loadedClass in classes)			{				// Look if the class has a remote class alias assigned.				var classInfo:XML = describeType(loadedClass);//				var remoteClass:XMLList = classInfo.factory.metadata.(@name="RemoteClass");//				var remoteClassTag:XML;//				var remoteClassAlias:String;//				for each (remoteClassTag in remoteClass)//				{//					if (remoteClassTag.elements("arg").length() == 1)//					{//						remoteClassAlias = remoteClassTag.arg.(@key="alias").@value.toString();//					}//				}								// If a remote class alias was found use it as a registration name, otherwise use its full qualified class name.				var registrationName:String;//				if (remoteClassAlias)//				{//					registrationName = remoteClassAlias;//				}//				else//				{//					registrationName = getQualifiedClassName(loadedClass);//				}				registrationName = getQualifiedClassName(loadedClass)								// Handy if you're using AMF class mapping				registerClassAlias(registrationName, loadedClass);								// Start an instance of the loaded class and print out the NAME property to the output TextField.				var objectInstance:Object = new loadedClass();//				_output.appendText("\nNAME = ");//				_output.appendText(objectInstance.NAME);				//				trace("new: "+ objectInstance.name);//				addPage("prologue.PrologueView");				_sectionHolder.addChild(objectInstance as DisplayObject);//				EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.PAGE_ON));				MovieClip(objectInstance).addEventListener(Event.ADDED_TO_STAGE, newPageOn);			}		}						protected function showPage(event:ViewEvent):void
		{
			//			TweenMax.to(_sectionHolder, 1, {autoAlpha:0, onComplete:addPage, onCompleteParams:[event.data.id]});			TweenMax.to(_fade, 1, {autoAlpha:1, onComplete:addPage, onCompleteParams:[event.data.id]});//			addPage(event.data.id);
		}						protected function appSubmitted(event:ApplicationEvent):void
		{			if (_introSound) {				_introSound.stop(true);				_introSound = null;			}						var infObj:Object = event.data as Object;						DataModel.defenderInfo.defender = infObj.defender;			DataModel.defenderInfo.age = infObj.age;			DataModel.defenderInfo.hair = infObj.hair;			DataModel.defenderInfo.beverage = infObj.beverage;			DataModel.defenderInfo.gender = infObj.gender;			DataModel.defenderInfo.romantic = infObj.romantic;			DataModel.defenderInfo.companion = infObj.companion;			DataModel.defenderInfo.weapon = infObj.weapon;			DataModel.defenderInfo.instrument = infObj.instrument;			DataModel.defenderInfo.wardrobe = infObj.wardrobe;
			DataModel.defenderInfo.contact = infObj.contact;			DataModel.defenderInfo.contactGender = int(infObj.contactGender);			DataModel.defenderInfo.applicationDate = new Date();						// TESTING !!!!!!			if (infObj.defender == "") {				testData();			}						if (DataModel.defenderInfo.gender == 2) {				// assign either male of female if undecided				_randNum = Math.round(DataModel.getInstance().randomRange(0,1));				DataModel.defenderInfo.gender = _randNum;			}			if (DataModel.defenderInfo.romantic == 2) {				// assign either male of female if undecided				_randNum = Math.round(DataModel.getInstance().randomRange(0,1));				DataModel.defenderInfo.romantic = _randNum;			}						if (_applicationScreen) {				TweenMax.to(_applicationScreen, 1, {y:-DataModel.APP_HEIGHT, ease:Quad.easeInOut, onComplete:showPrologue});			} else {				TweenMax.to(_currentPage, 1, {y:-DataModel.APP_HEIGHT, ease:Quad.easeInOut, onComplete:showPrologue});			}			
//			TweenMax.to(_applicationScreen, 0, {y:-DataModel.APP_HEIGHT, ease:Quad.easeInOut, onComplete:addPage, onCompleteParams:["theCattery.MouseConsultationView"]});
//			TweenMax.to(_applicationScreen, 0, {y:-DataModel.APP_HEIGHT, ease:Quad.easeInOut, onComplete:addPage, onCompleteParams:["joylessMountains.JoylessMountainsIntroView"]});
		}				private function testData():void {			if (!DataModel.defenderInfo) {				DataModel.defenderInfo = new DefenderApplicationInfo();			}//			DataModel.defenderInfo.defender = "Sarah";			DataModel.defenderInfo.defender = "Martha Mary Marlene May";			DataModel.defenderInfo.age = "30";			DataModel.defenderInfo.hair = "blond";			DataModel.defenderInfo.beverage = "Pinot Grigio";			DataModel.defenderInfo.gender = 1;			DataModel.defenderInfo.romantic = 0;			DataModel.defenderInfo.companion = 0;			DataModel.defenderInfo.weapon = 3;			DataModel.defenderInfo.instrument = 2;			DataModel.defenderInfo.wardrobe = 0;			DataModel.defenderInfo.contact = "Millicent";			//				DataModel.defenderInfo.contactFBID = "100004309001809";			DataModel.defenderInfo.contactFBID = null;			DataModel.defenderInfo.contactGender = 0;			DataModel.defenderInfo.applicationDate = new Date();		}				protected function showApplication(event:ApplicationEvent):void
		{			EventController.getInstance().removeEventListener(ApplicationEvent.TITLE_DONE, showApplication);			
			if (_titleScreen) {				_titleScreen.destroy();				_mc.removeChild(_titleScreen);			}			_applicationScreen = new ApplicationView();			_mc.addChild(_applicationScreen);			DataModel.defenderInfo = new DefenderApplicationInfo();		}					private function showPrologue() : void {			if (_applicationScreen) {				_applicationScreen.destroy();				_mc.removeChild(_applicationScreen);				_applicationScreen = null;			}//			PrologueView//			addPage("prologue.PrologueView");			//			TweenMax.to(_navigation, 0, {autoAlpha:1});//			TweenMax.from(_navigation, 1, {y:-100, ease:Quad.easeInOut});		}						private function removeCurrentPage() : void {			if (_applicationScreen) {				_applicationScreen.destroy();				_mc.removeChild(_applicationScreen);				_applicationScreen = null;			}						if (_currentPage != null) {				_currentPage.destroy();				_sectionHolder.removeChild(MovieClip(_currentPage));				_currentPage = null;			}					}		private function addPage(thisPage:String, thisPackage:String = "view.") : void {						removeCurrentPage();						//!GARBAGE COLLECT			System.gc();						if (thisPage == "theCattery.BopMiceView" || thisPage == "bopMice.BopMice") {				_mc.stage.frameRate = DataModel.BOP_MICE_FPS;			} else {				_mc.stage.frameRate = 60;			}						_newPageClass = getDefinitionByName(thisPackage+thisPage) as Class;									_currentPage = new _newPageClass();			MovieClip(_currentPage).addEventListener(Event.ADDED_TO_STAGE, newPageOn);			_sectionHolder.addChild(MovieClip(_currentPage));		}				protected function newPageOn(event:Event):void
		{//			trace("NEW PAGE ON@@@@@");
			MovieClip(_currentPage).removeEventListener(Event.ADDED_TO_STAGE, newPageOn);			TweenMax.to(_fade, 1, {autoAlpha:0, onComplete:pageIn, delay:0});//			TweenMax.to(_sectionHolder, 1, {autoAlpha:1, onComplete:pageIn});//			pageIn();
		}				private function pageIn():void {			EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.PAGE_ON));		}			}}