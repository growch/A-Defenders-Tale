package  control{	import com.milkmangames.nativeextensions.GVFacebookFriend;	import com.milkmangames.nativeextensions.GVHttpMethod;	import com.milkmangames.nativeextensions.GoViral;	import com.milkmangames.nativeextensions.events.GVFacebookEvent;		import flash.display.BitmapData;	import flash.display.GradientType;	import flash.display.Sprite;	import flash.filters.DropShadowFilter;	import flash.geom.Matrix;	import flash.text.TextField;	import flash.text.TextFormat;		import events.ViewEvent;
		/** GoViralExample App */	public class GoViralService extends Sprite	{		//		// Definitions		//				/** CHANGE 'YOUR::APP_ID' TO YOUR FACEBOOK APP ID in quotes! */		//public static const FACEBOOK_APP_ID:String="12345678900";		public static const FACEBOOK_APP_ID:String="351887674885054";				//		// Instance Variables		//		public var isSupported:Boolean;				/** My Profile */		private var myProfile:GVFacebookFriend;				//		// Public Methods		//				/** Create New GoViralExample */		public function GoViralService() 		{					log("+++Started GoViralService+++");			init();		}						/** Init */		public function init():void		{			// check if GoViral is supported on the machine currently running it			if (!GoViral.isSupported())			{				log("Extension is not supported on this platform.");				return;			}						isSupported = true;						GoViral.create();						log("GoViral Extension Initialized: "+GoViral.VERSION);						// initialize facebook.					// this is to make sure you remembered to put in your app ID !			if (FACEBOOK_APP_ID=="YOUR_FACEBOOK_APP_ID")			{				log("You forgot to put in Facebook ID!");			}			else			{				if (!GoViral.goViral.isFacebookSupported())				{					log("Sorry, this device does not support Facebook with Adobe AIR.  You can get around this by compiling on a mac with instructions from https://bugbase.adobe.com/index.cfm?event=bug&id=3686856");				}				else				{					log("Initializing facebook...");					GoViral.goViral.initFacebook(FACEBOOK_APP_ID, "",true);					log("Facebook Initialized! GoViral v"+GoViral.VERSION);				}			}						// set up all the event listeners.			// you only need the ones for the services you want to use.						// facebook events			GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_IN,onFacebookEvent);			GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_OUT,onFacebookEvent);			GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_CANCELED,onFacebookEvent);			GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_FAILED,onFacebookEvent);						// facebook events for manually updating permissions			GoViral.goViral.addEventListener(GVFacebookEvent.FB_READ_PERMISSIONS_UPDATED, onFacebookEvent);			GoViral.goViral.addEventListener(GVFacebookEvent.FB_PUBLISH_PERMISSIONS_UPDATED, onFacebookEvent);			GoViral.goViral.addEventListener(GVFacebookEvent.FB_READ_PERMISSIONS_FAILED, onFacebookEvent);			GoViral.goViral.addEventListener(GVFacebookEvent.FB_PUBLISH_PERMISSIONS_FAILED, onFacebookEvent);					}				// Examples of using Facebook methods				/** Login to facebook */		public function loginFacebook():void		{			log("Login with facebook...");			if(!GoViral.goViral.isFacebookAuthenticated())			{//				GoViral.goViral.authenticateWithFacebook();				GoViral.goViral.authenticateWithFacebook("public_profile,user_friends");								log("Waiting for login response...");			}			else			{				log("done (already authenticated)");				EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_LOGGED_IN));			}					}				/** Request New Read Permissions */		private function requestNewReadPermissions():void		{			var newPerms:String="email";			log("Requesting new permission '"+newPerms+"'...");			GoViral.goViral.requestNewFacebookReadPermissions(newPerms);		}				/** Request New Publish Permissions */		private function requestNewPublishPermissions():void		{			var newPerms:String="publish_actions";			log("Requesting new permission '"+newPerms+"'...");			GoViral.goViral.requestNewFacebookPublishPermissions(newPerms);		}				/** Logout of facebook */		private function logoutFacebook():void		{			log("logout facebook.");			GoViral.goViral.logoutFacebook();		}				/** Stage a Facebook Image */		private function stageFacebookImage():void		{						log("Staging image...");			var bitmapData:BitmapData=getOrCreateBitmapData();			GoViral.goViral.stageFacebookImage(bitmapData).addRequestListener(function(e:GVFacebookEvent):void{				log("Image staged result:"+e.jsonData);			});					}		//		/** Share an Open Graph Object with the native Open Graph Action Dialog *///		private function facebookOpenGraphDialog():void//		{//			if (!GoViral.goViral.isFacebookGraphDialogAvailable())//			{//				log("Graph Action Dialog not available - update Facebook app or use classic dialog!");//				return;//			}//			//			var bitmapData:BitmapData=getOrCreateBitmapData();//			//			log("Submitting graph action dialog..");//			GoViral.goViral.showFacebookGraphDialog(//				"mmg_sample:testaction", //				"mmg_sample:testobject", //				"Graph Action Title", //				"Graph Action Description",//				"http://www.milkmangames.com", //				bitmapData).addDialogListener(function(e:GVFacebookEvent):void {//					switch(e.type)//					{//						case GVFacebookEvent.FB_DIALOG_CANCELED://							log("The Graph Dialog was canceled.");//							break;//						case GVFacebookEvent.FB_DIALOG_FAILED://							log("The Graph Dialog has failed:"+e.errorMessage);//							break;//						case GVFacebookEvent.FB_DIALOG_FINISHED://							log("Successfully posted to graph dialog:"+e.jsonData);//							break;//					}//				});//			//		}		//		/** Share with the Native FacebookShare Dialog *///		private function facebookShareDialog():void//		{//			var canUseShareDialog:Boolean=GoViral.goViral.isFacebookShareDialogAvailable();//			//			GoViral.goViral.showFacebookShareDialog(//				"Posting from GoViral v4", //				"This is the caption!", //				"This is the description. ", //				"http://www.milkmangames.com", //				"http://www.milkmangames.com/gvremoteimage.jpg").addDialogListener(function(e:GVFacebookEvent):void {//					switch(e.type)//					{//						case GVFacebookEvent.FB_DIALOG_CANCELED://							log("The Share Dialog was canceled.");//							break;//						case GVFacebookEvent.FB_DIALOG_FAILED://							log("The Share Dialog has failed:"+e.errorMessage);//							break;//						case GVFacebookEvent.FB_DIALOG_FINISHED://							log("Successfully posted to share dialog:"+e.jsonData);//							break;//					}//				});//			//			// the extension will have automatically defaulted to the classic 'feed' dialog, if share dialog was not available.//			if (!canUseShareDialog)//			{//				log("Native Sharing was not available.  Used Feed Dialog instead.");//			}//		}				/** Post to the facebook wall / feed via the classic web dialog.  The native dialog is now preferred if available. */		private function postOldFeedDialog():void		{			log("posting fb feed dialog....");			GoViral.goViral.showFacebookFeedDialog(				"Posting from AIR",				"This is a caption",				"This is a message!",				"This is a description",				"http://www.milkmangames.com",				"http://www.milkmangames.com/gvremoteimage.jpg",				{actions:{name:"Google",link:"http://www.google.com"}}			).addDialogListener(function(e:GVFacebookEvent):void {				trace("oldfeed.response");				switch(e.type)				{					case GVFacebookEvent.FB_DIALOG_CANCELED:						log("The Feed Dialog was canceled.");						break;					case GVFacebookEvent.FB_DIALOG_FAILED:						log("The Feed Dialog has failed:"+e.errorMessage);						break;					case GVFacebookEvent.FB_DIALOG_FINISHED:						log("Successfully posted to Feed dialog:"+e.jsonData);						break;				}			});					}				public function postFacebookWall(title:String, caption:String, message:String):void		{			log("postFacebookWall....");			GoViral.goViral.showFacebookFeedDialog(				title,				caption,				message,				message,				"http://www.adefenderstale.com",				"http://www.adefenderstale.com/media/stills/iPad_01.png"//				{actions:{name:"Google",link:"http://www.google.com"}}			).addDialogListener(function(e:GVFacebookEvent):void {				trace("oldfeed.response");				EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DONE));				switch(e.type)				{					case GVFacebookEvent.FB_DIALOG_CANCELED:						log("The Feed Dialog was canceled.");						break;					case GVFacebookEvent.FB_DIALOG_FAILED:						log("The Feed Dialog has failed:"+e.errorMessage);						break;					case GVFacebookEvent.FB_DIALOG_FINISHED:						log("Successfully posted to Feed dialog:"+e.jsonData);						break;				}			});					}				/** Request friends using the deprecated/unsupported v1 graph api */		public function getFriendsDEPRECATED():void		{			log("Getting v1 friends...");						GoViral.goViral.facebookGraphRequest("me/friends",GVHttpMethod.GET,null,null,true).addRequestListener(function(e:GVFacebookEvent):void {				if (e.type==GVFacebookEvent.FB_REQUEST_RESPONSE)				{					var allFriends:String="";					var friendsVector:Vector.<GVFacebookFriend> = new Vector.<GVFacebookFriend>();					for each(var friend:GVFacebookFriend in e.friends)					{						allFriends+=","+friend.name;						friendsVector.push(friend);					}					EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DEFENDER_FRIENDS, friendsVector));					log("DEPRECATED"+"-= ("+e.friends.length+")="+allFriends+",json="+e.jsonData);				}				else				{					log("The v1 friends request failed:"+e.errorMessage);				}			});					}		//		/** Get a list of all your facebook friends *///		private function getFriendsFacebook():void//		{//			log("getting friends with app...");//			//			GoViral.goViral.requestFacebookFriends().addRequestListener(function(e:GVFacebookEvent):void {//				if (e.type==GVFacebookEvent.FB_REQUEST_RESPONSE)//				{//					var allFriends:String="";//					for each(var friend:GVFacebookFriend in e.friends)//					{//						allFriends+=","+friend.name;//					}//					//					log(e.graphPath+"-= ("+e.friends.length+")="+allFriends+",json="+e.jsonData);//				}//				else//				{//					log("The friends request failed:"+e.errorMessage);//				}//			});//			//		}				/** Get your own facebook profile */		public function getMeFacebook():void		{			log("Getting profile...");						GoViral.goViral.requestMyFacebookProfile().addRequestListener(function(e:GVFacebookEvent):void {				if (e.type==GVFacebookEvent.FB_REQUEST_RESPONSE)				{					var myProfile:GVFacebookFriend=e.friends[0];					log("My Profile: "+myProfile.id+						", name='"+myProfile.name+						"',gender='"+myProfile.gender+						"',location='"+myProfile.locationName+						"',bio='"+myProfile.bio+"'");										this.myProfile=myProfile;					EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_DEFENDER_INFO, myProfile));				}				else				{					log("profile failed:"+e.errorMessage);				}			});		}				/** Get Facebook Access Token */		private function getFacebookToken():void		{			log("Retrieving access token...");						var accessToken:String=GoViral.goViral.getFbAccessToken();			var accessExpiry:Number=GoViral.goViral.getFbAccessExpiry();			var expiryDate:Date=new Date();			expiryDate.setTime(accessExpiry);			expiryDate=(accessExpiry==0)?null:expiryDate;						log("auth is:"+GoViral.goViral.isFacebookAuthenticated()+",expiry:"+accessExpiry+"("+expiryDate+"),token: "+accessToken);		}				//		/** Make a post graph request *///		private function postGraphFacebook():void//		{		//			// here we send a post directly to the feed without user interaction.//			var params:Object={};//			params.name="Name Test";//			params.caption="Caption Test";//			params.link="http://www.milkmangames.com";//			params.actions=new Array();//			params.actions.push({name:"Link NOW!", link:"http://www.google.com"});//			//			GoViral.goViral.facebookGraphRequest(//				"me/feed",//				GVHttpMethod.POST,//				params,//				"publish_actions").addRequestListener(function(e:GVFacebookEvent):void {//					if (e.type==GVFacebookEvent.FB_REQUEST_RESPONSE)//					{//						log("Successfully posted to feed: "+e.jsonData);//					}//					else//					{//						log("An error occurred posting : "+e.errorMessage);//					}//				});//			//		}		//		/** Show a facebook friend invite dialog *///		private function inviteFriendsFacebook():void//		{//			log("inviting friends...");//			//			GoViral.goViral.showFacebookRequestDialog(//				"Play my game",//				"Play this game with me!").addDialogListener(function(e:GVFacebookEvent):void {//					switch(e.type)//					{//						case GVFacebookEvent.FB_DIALOG_CANCELED://							log("The Invite Dialog was canceled.");//							break;//						case GVFacebookEvent.FB_DIALOG_FAILED://							log("The Invite Dialog has failed:"+e.errorMessage);//							break;//						case GVFacebookEvent.FB_DIALOG_FINISHED://							log("Successfully invited friends dialog:"+e.jsonData);//							if(e.data.to)//							{//								log("Invited these people :"+e.data.to.join(","));//							}//							break;//					}//				});//		}		//		/** Post a photo to the facebook stream *///		private function postPhotoFacebook():void//		{//			log("post facebook photo...");//			var bitmapData:BitmapData=getOrCreateBitmapData();//			//			GoViral.goViral.facebookPostPhoto("posted from AIR sdk", bitmapData).addRequestListener(function(e:GVFacebookEvent):void {//				if (e.type==GVFacebookEvent.FB_REQUEST_RESPONSE)//				{//					log("Posted photo! "+e.jsonData);//				}//				else//				{//					log("Photo request failed:"+e.errorMessage);//				}//			});//		}							/** Check you're logged in to facebook before doing anything else. */		private function checkLoggedInFacebook():Boolean		{			// make sure you're logged in first			if (!GoViral.goViral.isFacebookAuthenticated())			{				log("Not logged in!");				return false;			}			return true;					}				//		// Social Composer				/** Social Composer Facebook *///		public function socialComposerFacebook():void//		{//			log("Check availability...");//			if (!GoViral.goViral.isSocialServiceAvailable(GVSocialServiceType.FACEBOOK))//			{//				log("Facebook service not available.");//				return;//			}//			//			var bitmapData:BitmapData=getOrCreateBitmapData();//			//			log("Showing composer...");//			GoViral.goViral.displaySocialComposerView(//				GVSocialServiceType.FACEBOOK, //				"Hello facebook!",//				bitmapData, //				"http://www.milkmangames.com").addDialogListener(function(e:GVShareEvent):void {//					switch(e.type)//					{//						case GVShareEvent.SOCIAL_COMPOSER_FINISHED://							log("Facebook composer finished!");//							break;//						case GVShareEvent.SOCIAL_COMPOSER_CANCELED://							log("Facebook composer canceled.");//							break;//					}//				});//			log("did show Facebook composer.");//		}				//		// Events		//				/** Handle Facebook Event */		private function onFacebookEvent(e:GVFacebookEvent):void		{			switch(e.type)			{				case GVFacebookEvent.FB_LOGGED_IN:					log("Logged in to facebook:"+GoViral.VERSION+						",denied: ["+GoViral.goViral.getDeclinedFacebookPermissions()+						"], profile permission?"+GoViral.goViral.isFacebookPermissionGranted("public_profile"));					EventController.getInstance().dispatchEvent(new ViewEvent(ViewEvent.FACEBOOK_LOGGED_IN));					break;				case GVFacebookEvent.FB_LOGGED_OUT:					log("Logged out of facebook.");					break;				case GVFacebookEvent.FB_LOGIN_CANCELED:					log("Canceled facebook login.");					break;				case GVFacebookEvent.FB_LOGIN_FAILED:					log("Login failed:"+e.errorMessage+",sn?"+e.shouldNotifyFacebookUser+",cat?"+e.facebookErrorCategoryId);					break;				case GVFacebookEvent.FB_PUBLISH_PERMISSIONS_FAILED:				case GVFacebookEvent.FB_READ_PERMISSIONS_FAILED:					log("perms failed:"+e.errorMessage+",sn?"+e.shouldNotifyFacebookUser+",cat?"+e.facebookErrorCategoryId+","+e.permissions);					break;				case GVFacebookEvent.FB_READ_PERMISSIONS_UPDATED:				case GVFacebookEvent.FB_PUBLISH_PERMISSIONS_UPDATED:					log("Perms updated:"+e.permissions);			}		}					//		// Impelementation		// Code below creates the UI for the test harness.		//				/** Log */		private function log(msg:String):void		{			trace("[GoViralExample] "+msg);		}				/** Get or Create BitmapData */		private var myBitmapData:BitmapData;		private function getOrCreateBitmapData():BitmapData		{			if (myBitmapData!=null)			{				return myBitmapData;			}						var canvas:Sprite=new Sprite();			var matrix:Matrix=new Matrix();			matrix.createGradientBox(1000, 750, Math.PI*.5, 0, 0);			canvas.graphics.lineStyle(7, 0x171717);			canvas.graphics.beginGradientFill(GradientType.LINEAR, [0x626262,0x232323,0], [1,1, 1], [0, 100, 255],matrix);			canvas.graphics.drawRoundRect(4, 4, 952, 632,90,90);			canvas.graphics.endFill();						canvas.graphics.beginGradientFill(GradientType.LINEAR, [0xffffff, 0x333333], [1, 1], [0, 255], matrix);			canvas.graphics.drawCircle(480, 320, 200);			canvas.graphics.endFill();						canvas.graphics.beginGradientFill(GradientType.LINEAR, [0xC83F37, 0x6B1414], [1, 1], [0, 255], matrix);			canvas.graphics.drawCircle(480, 320, 80);			canvas.graphics.endFill();						var txtLabel:TextField=new TextField();			txtLabel.defaultTextFormat=new TextFormat("Arial", 42, 0xffffff,true,false,false,null,null,"center");			txtLabel.text="This bitmap image was posted by an automated test with the GoViral Native Extension API for Adobe AIR from www.milkmangames.com";			txtLabel.filters=[new DropShadowFilter(2, 45, 0, 1, 4, 4, 1, 4, false, false)];						txtLabel.width=960;			txtLabel.height=640;			txtLabel.multiline=true;			txtLabel.wordWrap=true;			txtLabel.x=canvas.width*.5-txtLabel.width*.5;			txtLabel.y=canvas.height*.35;			canvas.addChild(txtLabel);						myBitmapData=new BitmapData(960, 640, false, 0xffffffff);			myBitmapData.draw(canvas);			return myBitmapData;		}		}}/** Inline Command *///class Command//{//	/** Callback Method *///	private var fnCallback:Function;//	//	/** Label *///	private var label:String;//	//	////	// Public Methods//	////	//	/** Create New Command *///	public function Command(label:String,fnCallback:Function)//	{//		this.fnCallback=fnCallback;//		this.label=label;//	}//	//	////	// Command Implementation//	////	//	/** Get Label *///	public function getLabel():String//	{//		return label;//	}//	//	/** Execute *///	public function execute():void//	{//		fnCallback();//	}//}