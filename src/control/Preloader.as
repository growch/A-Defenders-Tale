package control {	import model.DataModel;		import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;	import events.ApplicationEvent;	import gs.TweenLite;	import util.Logger;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import model.FlashVars;		/**	 * @author Francois Balmelle	 */	public class Preloader extends MovieClip 	{		private var _flashVars : FlashVars;		private var _loader : BulkLoader;		private var _assets : Array = [];		private var _allLoaded : Boolean = false;		private var _dm : DataModel;		public function Preloader()		{			stage.align = StageAlign.TOP_LEFT;			this.stage.scaleMode = StageScaleMode.NO_SCALE;			init( );		}		private function init(e : ApplicationEvent = null) : void		{			//check input parameters			_flashVars = new FlashVars( );			var paramObj : Object = LoaderInfo( this.root.loaderInfo ).parameters;            			for (var inputVar:String in paramObj) 			{                 				_flashVars[inputVar] = String( paramObj[inputVar] );			}            			Logger.log( _flashVars.main_file + " - " + _flashVars.config_file + " - " + _flashVars.tracking_file );						if ( !_flashVars.main_file ) _flashVars.main_file = "main.swf";			if ( !_flashVars.config_file ) _flashVars.config_file = "config.xml";			if ( !_flashVars.xml_dir ) _flashVars.xml_dir = "xml/";			if ( !_flashVars.root_dir ) _flashVars.root_dir = "";			if( _flashVars.assets ) 			{				var str : String = String( _flashVars.assets );				_assets = str.split( "," );			} 									_dm = DataModel.getInstance( );			DataModel.MAINAPPPATH = _flashVars.root_dir;			DataModel.APPDATAURL = _flashVars.config_file;			DataModel.XML_DIR = _flashVars.xml_dir;			 			_dm.addEventListener( ApplicationEvent.APP_DATA_LOADED, onApplicationDataLoaded );			//_dm.addEventListener( ApplicationEvent.DISPLAY_ERROR, onLoadingError );			_dm.loadApplicationConfigurationFile( );		}		private function onApplicationDataLoaded(e : ApplicationEvent) : void 		{			// creates a BulkLoader instance with a name of "connectivity__loader", 			//that can be used to retrieve items without having a reference to this instance			_loader = new BulkLoader( "_as3_mvc_template_loader" );			// set level to verbose, for debugging only			_loader.logLevel = BulkLoader.LOG_SILENT;						_loader.add( _flashVars.config_file, {id:"config", maxTries:6, priority:10} );			var assetID : String;			for (var i : Number = 0; i < _assets.length ; i++) 			{				assetID = "asset" + i;				_loader.add( DataModel.MAINAPPPATH + _assets[i], {id:assetID, maxTries:6, priority:10} );			}			_loader.add( DataModel.MAINAPPPATH + _flashVars.main_file, {id:"_main", maxTries:6, priority:10} );						// dispatched when ALL the items have been loaded:			_loader.addEventListener( BulkLoader.COMPLETE, onAllItemsLoaded );			// dispatched when any item has progress:			_loader.addEventListener( BulkLoader.PROGRESS, onAllItemsProgress );			// now start the loading			_loader.start( );		}				private function onAllItemsLoaded(evt : Event) : void		{			Logger.log( "everything is loaded!" );			_loader.removeEventListener( BulkLoader.COMPLETE, onAllItemsLoaded );			_allLoaded = true;			var mainMC : MovieClip = _loader.getMovieClip( DataModel.MAINAPPPATH + _flashVars.main_file );			addChild( mainMC );		}		// this evt is a "super" progress event, it has all the information you need to 		// display progress by many criterias (bytes, items loaded, weight)		private function onAllItemsProgress(evt : BulkProgressEvent) : void		{			Logger.log( evt.loadingStatus( ) );			var percent : int = Math.floor( evt.percentLoaded * 100 );			if(Math.round( evt.percentLoaded * 100 ) >= 100)			{				_loader.removeEventListener( BulkLoader.PROGRESS, onAllItemsProgress );			}		}	}}